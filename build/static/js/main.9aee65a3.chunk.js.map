{"version":3,"sources":["logo.svg","DrumPad.js","DrumMachine.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","DrumPad","handleKeyDown","event","keyCode","props","letter","charCodeAt","audio","play","handleDisplay","id","handleClick","currentTime","document","addEventListener","this","className","onClick","ref","src","Component","data","keyTrigger","url","DrumMachine","inputDisplay","setState","display","state","bind","map","d","logo","alt","React","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kIAAAA,EAAOC,QAAU,IAA0B,kC,yMC2C5BC,E,2MAlCfC,cAAgB,SAACC,GACVA,EAAMC,UAAY,EAAKC,MAAMC,OAAOC,eACnC,EAAKC,MAAMC,OACX,EAAKJ,MAAMK,cAAc,EAAKL,MAAMM,M,EAI5CC,YAAc,WACV,EAAKJ,MAAMC,OACX,EAAKD,MAAMK,YAAc,EACzB,EAAKR,MAAMK,cAAc,EAAKL,MAAMM,K,mFAbpCG,SAASC,iBAAiB,UAAUC,KAAKd,iB,+BAgB/B,IAAD,OACL,OACI,yBAAKe,UAAU,eACX,yBAAKA,UAAU,WAAWC,QAAWF,KAAKJ,YAAcD,GAAIK,KAAKX,MAAMC,QACvE,2BACAa,IAAK,SAAAA,GAAG,OAAI,EAAKX,MAAQW,GACzBF,UAAY,OACZN,GAAIK,KAAKX,MAAMC,OACfc,IAAKJ,KAAKX,MAAMe,MAEhB,2BAAIJ,KAAKX,MAAMM,KAEf,yBAAKM,UAAU,eACf,yBAAKA,UAAU,aAAaD,KAAKX,MAAMC,c,GAhCjCe,aCEhBC,EAAO,CAAC,CAAClB,QAAS,GAAImB,WAAY,IAAKZ,GAAI,eAAMa,IAAK,qDAC5C,CAACpB,QAAS,GAAImB,WAAY,IAAKZ,GAAI,eAAMa,IAAK,yDAC9C,CAACpB,QAAS,GAAGmB,WAAY,IAAIZ,GAAI,SAAIa,IAAK,kEAC1C,CAACpB,QAAS,GAAGmB,WAAY,IAAIZ,GAAI,eAAKa,IAAK,uGAC3C,CAACpB,QAAS,GAAGmB,WAAY,IAAIZ,GAAI,eAAKa,IAAK,oEAC3C,CAACpB,QAAS,GAAGmB,WAAY,IAAIZ,GAAI,qBAAMa,IAAK,oEAC5C,CAACpB,QAAS,GAAGmB,WAAY,IAAIZ,GAAI,eAAKa,IAAK,4DAC3C,CAACpB,QAAS,GAAGmB,WAAY,IAAIZ,GAAI,eAAKa,IAAK,0EAC3C,CAACpB,QAAS,GAAGmB,WAAY,IAAIZ,GAAI,eAAKa,IAAK,gDAoC5CC,E,YAhCP,WAAYpB,GAAQ,IAAD,8BACX,4CAAMA,KAUdK,cAAgB,SAACgB,GAAD,OAAoB,EAAKC,SAAS,CAACC,QAASF,KARpD,EAAKG,MAAQ,CACLD,QAAS,gBAGjB,EAAKlB,cAAgB,EAAKA,cAAcoB,KAAnB,gBAPV,E,sEAaT,IAAD,OAED,OACQ,yBAAKnB,GAAG,gBACA,yBAAKA,GAAG,WAAWK,KAAKa,MAAMD,SAClC,yBAAKX,UAAU,aACdK,EAAKS,KAAI,SAAAC,GAAC,OACP,kBAAC,EAAD,CAAS1B,OAAQ0B,EAAET,WAAYH,IAAKY,EAAER,IAAKb,GAAIqB,EAAErB,GAAID,cAAe,EAAKA,oBAG7E,yBAAKO,UAAU,UACX,uBAAGN,GAAG,WAAN,gFACA,yBAAKS,IAAKa,IAAMhB,UAAU,aAAaiB,IAAI,qB,GA1BjDC,IAAMd,WCDjBe,E,iLARX,OACE,yBAAKnB,UAAU,WACb,kBAAC,EAAD,W,GALUkB,IAAMd,WCQJgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS7B,SAAS8B,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9aee65a3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport './App.css';\n\nclass DrumPad extends Component {\n\ncomponentDidMount() {\n    document.addEventListener('keydown',this.handleKeyDown)\n}\n\nhandleKeyDown = (event) => {\n    if(event.keyCode === this.props.letter.charCodeAt()) {\n        this.audio.play()\n        this.props.handleDisplay(this.props.id)\n    }\n}\n\nhandleClick = () => {\n    this.audio.play()\n    this.audio.currentTime = 0\n    this.props.handleDisplay(this.props.id)\n}\n\n    render() {\n        return (\n            <div className='button-pack'>\n                <div className='drum-pad' onClick = {this.handleClick}  id={this.props.letter}>\n                <audio \n                ref={ref => this.audio = ref}\n                className = 'clip'\n                id={this.props.letter}\n                src={this.props.src}>\n                </audio>\n                <p>{this.props.id}</p>\n                </div>\n                <div className='key-wrapper'>\n                <div className='press-key'>{this.props.letter}</div>\n                </div>\n        \n            </div>\n        )\n    }\n}\n\nexport default DrumPad;\n\n","import React from 'react';\nimport './App.css';\nimport logo from './logo.svg';\nimport DrumPad from './DrumPad';\n\nconst data = [{keyCode: 81, keyTrigger: '1', id: '🌋', url: 'http://allacrost.org/staff/user/hamiko/quake2.wav'}, \n                {keyCode: 87, keyTrigger: '2', id: '💧', url: 'http://home.teleport.com/~donmisc1/smallwaterfall.wav'}, \n                {keyCode: 69,keyTrigger: '3',id: '⚡',url: 'http://solberg.snr.missouri.edu/People/fox/atm050/THUNDR03.WAV'}, \n                {keyCode: 65,keyTrigger: '4',id: '🔫',url: 'http://soundfxcenter.com/video-games/halo-3/8d82b5_Halo_3_Plasma_Rifle_Short_Burst_Sound_Effect.mp3'}, \n                {keyCode: 83,keyTrigger: '5',id: '💣',url: 'http://tastyspleen.net/~quake2/baseq2/sound/weapons/rocklx1a.wav'}, \n                {keyCode: 68,keyTrigger: '6',id: '🗡️',url: 'http://csfiles.maniapc.org/cs/sound/weapons/knifedragon_hit1.wav'}, \n                {keyCode: 90,keyTrigger: '7',id: \"🦅\",url: 'http://gameislands.net/gamecontent/Data/Sounds/eagle.wav'}, \n                {keyCode: 88,keyTrigger: '8',id: '🐷',url: 'http://www.vertigogaming.org/downloads/svencoop/sound/sc_psyko/pig.wav'}, \n                {keyCode: 67,keyTrigger: '9',id: '🦖',url: 'http://jp.popapostle.com/sounds/JP/roar.wav'},\n        ];\n\nclass DrumMachine extends React.Component {\n        constructor(props) {\n                super(props);\n\n                this.state = {\n                        display: '🔊'\n                }\n\n                this.handleDisplay = this.handleDisplay.bind(this);\n\n        }\n\n        handleDisplay = (inputDisplay) => ( this.setState({display: inputDisplay}))\n\n        render() {\n\n                return (\n                        <div id='drum-machine'>\n                                <div id='display'>{this.state.display}</div>\n                            <div className='drum-pack'>\n                            {data.map(d => (\n                                <DrumPad letter={d.keyTrigger} src={d.url} id={d.id} handleDisplay={this.handleDisplay}/>\n                            ))}  \n                            </div>\n                            <div className='footer'>\n                                <p id='credits'>Click emoji buttons or press num keys for sound. Designed by Sameer Ingavale</p> \n                                <img src={logo} className=\"React-logo\" alt=\"react-logo\" />\n                            </div>\n      </div>\n                )\n        }\n}\n\nexport default DrumMachine;\n","import React from 'react';\nimport './App.css';\nimport DrumMachine from './DrumMachine'\n\nclass App extends React.Component {\n  \n  render() {\n    return (\n      <div className='wrapper'>\n        <DrumMachine />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}